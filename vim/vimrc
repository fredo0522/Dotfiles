"
" Vimrc plugin configuration
"

call plug#begin('~/.vim/plugged')

Plug 'christoomey/vim-tmux-navigator'   " Tmux navigation on vim
Plug 'SirVer/ultisnips'         " Useful snippets
Plug 'lervag/vimtex', { 'for': 'tex' }  " Latex compiler and syntax
Plug 'tpope/vim-commentary'     " Comment lines more easely
Plug 'tpope/vim-vinegar'        " File menu search
Plug 'tpope/vim-surround'       " Easy motion with surrounds
Plug 'justinmk/vim-sneak'       " Easy searh with 2 letters
Plug 'jiangmiao/auto-pairs'     " Auto complete brackets and parentheses
Plug 'duggiefresh/vim-easydir'  " Make files and directories inside vim
Plug 'chriskempson/base16-vim'  " Nice colorscheme
Plug 'itchyny/lightline.vim'    " Nice statusline
Plug 'harenome/vim-mipssyntax', { 'for': 'mips' }  " Mips syntax for vim
Plug 'wincent/pinnacle'         " Control of the highlight groups
Plug 'wincent/loupe'            " See search commands more easy
" Fuzzy finder, it need ruby-dev
Plug 'wincent/command-t', {
  \   'do': 'cd ruby/command-t/ext/command-t && ruby extconf.rb && make'
  \ }

call plug#end()

" ------------------------ Plugins Configurations -----------------------

" --------------------- Ultisnips configuration ----------------------
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsSnippetsDir="~/dotfiles/vim/vimSnips"
let g:UltiSnipsSnippetDirectories=[$HOME.'/dotfiles/vim/vimSnips']

" Edit vertical Ultisnips edition
let g:UltiSnipsEditSplit="vertical"

" --------------------- Vimtex cofiguration -----------------------
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=1

" Symbols and special characters view nice or invisible in .tex files
set conceallevel=1
let g:tex_conceal='abdmg'

" Deleting all the temp files that latexmk compiler make
autocmd VimLeave *.tex !latexmk -c %

" ---------------- CommandT config ------------------------------
let g:CommandTCancelMap='<Esc>'

" ---------------- Vinegar config ------------------------------
let g:netrw_liststyle = 3

" ------------------ LightLine config ------------------------------
let g:lightline = {
  \   'colorscheme': 'fredoLightline',
  \   'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
  \   'subseparator': { 'left': '', 'right': '' },
  \   'active': {
  \     'right': [ ['percent'], ['lineinfo'] , ['filetype'] ],
  \     'left': [ [ 'myModified', 'mode', 'paste' , 'myReadonly'], ['myFilename'] ]
  \   },
  \   'inactive': {
  \     'right': [ ['filetype'] ],
  \     'left': [ ['relativepath'], ['myModified', 'myReadonly'] ]
  \   },
  \   'component': {
  \     'lineinfo': 'ℓ %3l:%-2v'
  \   },
  \   'component_function': {
  \     'myModified': 'LightlineModified',
  \     'myReadonly': 'LightlineReadonly',
  \     'myFilename': 'LightlineFilename'
  \   },
  \   'mode_map': {
  \     'n': '',
  \     'i': '',
  \     't': '',
  \     'R': '',
  \     'v': '',
  \     'V': '',
  \     "\<C-v>": '',
  \     'c' : '',
  \     's' : '',
  \     'S' : '',
  \     "\<C-s>": ''
  \   }
  \ }

function! LightlineModified()
  return &modifiable && &modified ? ' ✘ ' : '   '
endfunction

function! LightlineReadonly()
  return &readonly ? '' : ''
endfunction

" Trim filename if it's to long for statusline
function! LightlineFilename()
  let filename = expand('%:p') !=# '' ? expand('%:p') : '[No Name]'

  if filename =~ $HOME
    let filename = substitute(filename, $HOME, "~", "")
  endif

  if strlen(filename) > 45
    let filename = expand('%:t')
  endif
  return filename
endfunction

" ------------------ Loupe config ------------------------------
function! s:SetUpLoupeHighlight()
  execute 'highlight! QuickFixLine ' . pinnacle#extract_highlight('PmenuSel')

  highlight! clear Search
  execute 'highlight! Search ' . pinnacle#embolden('Underlined')

endfunction

let g:LoupeCenterResults=0

autocmd ColorScheme * call s:SetUpLoupeHighlight()

" ------------------ Sneak config ------------------------------
highlight! link Sneak Search

" ---------------- base16 colorscheme config --------------------------

" Colorsheme for Terminal (checkout https://github.com/chriskempson/base16-shell)
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" True colors on terminal
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

