"
" Vimrc
"

call plug#begin('~/.vim/plugged')

Plug 'preservim/nerdtree', { 'on':  'NERDTreeToggle' } " Tree view of any dir
Plug 'christoomey/vim-tmux-navigator'   " Move between tmux and vim panes
Plug 'lervag/vimtex', { 'for': 'tex' }  " Latex compiler, preview and syntax
Plug 'KeitaNakamura/tex-conceal.vim', {'for': 'tex'} " Better conceal on latex
Plug 'terryma/vim-smooth-scroll' " Smooth transitions while scrolling pages
Plug 'chriskempson/base16-vim'   " Nice color schemes
Plug 'wincent/pinnacle'          " Better control of the highlight groups
Plug 'wincent/loupe'             " Enhance search commands
Plug 'tpope/vim-commentary'      " Comment lines; the easy way
Plug 'tpope/vim-surround'        " Easy motions with brackets, parentheses, etc.
Plug 'tpope/vim-fugitive'        " Git commands on vim
Plug 'tpope/vim-eunuch'          " Shell commands on vim
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'          " Fuzzy finder
Plug 'jiangmiao/auto-pairs'      " Auto-close brackets, parenthesis, etc.
Plug 'SirVer/ultisnips'          " Useful snippets
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Better completion
Plug 'yuezk/vim-js'              " Better Javascript syntax
Plug 'MaxMEllon/vim-jsx-pretty'  " Syntax highlight on React development
Plug 'mattn/emmet-vim'           " HTML snippets

call plug#end()

"
" ------------------------ Plugins configurations --------------------
"

" ---------------------------- COC config -----------------------

" Tab key for competition
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Show documentation
nmap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    else
        call CocAction('doHover')
    endif
endfunction

" Better colors for errors and warnings messages
highlight! link CocErrorSign Statement
highlight! link CocWarningSign Repeat

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Install this extensions if they aren't install yet
let g:coc_global_extensions = ['coc-css', 'coc-tsserver', 'coc-vimlsp', 'coc-html', 'coc-json']
let g:coc_global_extensions += [ 'coc-python', 'coc-clangd', 'coc-sh', 'coc-go', 'coc-ultisnips']

" -------------------------- NERDTree config -------------------------
let g:NERDTreeShowHidden = 1
let g:NERDTreeCaseSensitiveSort = 1
let g:NERDTreeWinSize = 40
let g:NERDTreeRespectWildIgnore = 1

" ----------------------- Smooth-scroll config -----------------------
noremap <silent> <C-u> :call smooth_scroll#up(&scroll, 15, 1)<CR>
noremap <silent> <C-d> :call smooth_scroll#down(&scroll, 15, 1)<CR>
noremap <silent> <C-b> :call smooth_scroll#up(&scroll*2, 15, 2)<CR>
noremap <silent> <C-f> :call smooth_scroll#down(&scroll*2, 15, 2)<CR>

" ------------------------- Ultisnips config -------------------------
let g:UltiSnipsExpandTrigger = '<C-n>'
let g:UltiSnipsJumpForwardTrigger = '<C-n>'
let g:UltiSnipsJumpBackwardTrigger = '<C-p>'
let g:UltiSnipsSnippetsDir="~/dotfiles/vim/vimSnips"
let g:UltiSnipsSnippetDirectories=[$HOME.'/dotfiles/vim/vimSnips']

" Edit vertical Ultisnips edition
let g:UltiSnipsEditSplit="vertical"

" ------------------------- Vimtex config -----------------------------
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=2

" Close zathura on quit
function! CloseViewers()
    if executable('xdotool') && exists('b:vimtex')
                \ && exists('b:vimtex.viewer') && b:vimtex.viewer.xwin_id > 0
          call system('xdotool windowclose '. b:vimtex.viewer.xwin_id)
    endif
endfunction

" --------------------------- tex-conceal config -----------------------------
" Symbols and special characters view nice or invisible in .tex files
set conceallevel=1
let g:tex_conceal='abdgm'

" --------------------------- FZF config -----------------------------
" Size and position of the buffer
let g:fzf_layout = {'down': '38%'}

" If the file is in a buffer, jump to the buffer
let g:fzf_buffers_jump = 1

" Search files with ag if it's install
if executable('ag')
    let $FZF_DEFAULT_COMMAND = 'ag --hidden -U -g ""'
endif

let g:fzf_colors ={
    \ 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Exception'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Exception'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Function'],
    \ 'pointer': ['fg', 'Function'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment'] }

" -------------------------- Loupe config ----------------------------
let g:LoupeCenterResults=0

" ------------------- base16-colorscheme config ----------------------

" Checkout https://github.com/chriskempson/base16-shell
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
else
    colorscheme base16-classic-dark
endif

