"
" Vimrc plugin configuration
"

call plug#begin('~/.vim/plugged')

Plug 'christoomey/vim-tmux-navigator'   " Move between tmux panes and vim panes
Plug 'SirVer/ultisnips'         " Useful snippets
Plug 'lervag/vimtex', { 'for': 'tex' }  " Latex compiler and syntax
Plug 'tpope/vim-commentary'     " Comment lines more easily
Plug 'tpope/vim-vinegar'        " File menu search
Plug 'tpope/vim-surround'       " Easy motion with surrounds
Plug 'justinmk/vim-sneak'       " Fast motions moving between lines
Plug 'jiangmiao/auto-pairs'     " Auto complete brackets and parentheses
Plug 'chriskempson/base16-vim'  " Nice colorscheme
Plug 'itchyny/lightline.vim'    " Nice statusline
Plug 'harenome/vim-mipssyntax', { 'for': 'mips' }  " Mips syntax for vim
Plug 'wincent/pinnacle'         " Control of the highlight groups
Plug 'wincent/loupe'            " Enhance search commands
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'         " Fuzzy finder need fzf install on shell

call plug#end()

" ------------------------ Plugins Configurations --------------------

" ------------------------ Ultisnips config -------------------------
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'
let g:UltiSnipsSnippetsDir="~/dotfiles/vim/vimSnips"
let g:UltiSnipsSnippetDirectories=[$HOME.'/dotfiles/vim/vimSnips']

" Edit vertical Ultisnips edition
let g:UltiSnipsEditSplit="vertical"

" ------------------------- Vimtex cofig -----------------------------
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=2

" Symbols and special characters view nice or invisible in .tex files
let g:tex_conceal='abdmg'

" --------------------------- FZF config -----------------------------
" Size and positibion of the buffer
let g:fzf_layout = {'down': '36%'}

" If the file is open, jump to the buffer don't opened again
let g:fzf_buffers_jump = 1

" Search files with ag if it's install
if executable('ag')
    let $FZF_DEFAULT_COMMAND = 'ag --hidden -U -g ""'
endif

let g:fzf_colors ={
    \ 'fg':      ['fg', 'Normal'],
    \ 'bg':      ['bg', 'Normal'],
    \ 'hl':      ['fg', 'Exception'],
    \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
    \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
    \ 'hl+':     ['fg', 'Exception'],
    \ 'info':    ['fg', 'PreProc'],
    \ 'border':  ['fg', 'Ignore'],
    \ 'prompt':  ['fg', 'Function'],
    \ 'pointer': ['fg', 'Function'],
    \ 'marker':  ['fg', 'Keyword'],
    \ 'spinner': ['fg', 'Label'],
    \ 'header':  ['fg', 'Comment'] }

" ------------------------ Vinegar config ----------------------------
let g:netrw_liststyle = 3

" ---------------------- LightLine config ----------------------------
let g:lightline = {
    \   'colorscheme': 'fredoLightline',
    \   'separator': { 'left': "\ue0b0", 'right': "" },
    \   'subseparator': { 'left': '', 'right': '' },
    \   'active': {
    \     'right': [ ['percent'], ['lineinfo'], ['filetype'] ],
    \     'left': [ [ 'myModified', 'mode', 'paste' ], ['myFilename', 'myReadonly'] ]
    \   },
    \   'inactive': {
    \     'right': [ ['filetype'] ],
    \     'left': [ ['relativepath'], ['myModified', 'myReadonly'] ]
    \   },
    \   'component': {
    \     'lineinfo': 'ℓ %3l:%-2v%<'
    \   },
    \   'component_function': {
    \     'myModified': 'LightlineModified',
    \     'myReadonly': 'LightlineReadonly',
    \     'myFilename': 'LightlineFilename'
    \   },
    \   'mode_map': {
    \     'n': '',
    \     'i': '',
    \     't': '',
    \     'R': '',
    \     'v': '',
    \     'V': '',
    \     "\<C-v>": '',
    \     'c' : '',
    \     's' : '',
    \     'S' : '',
    \     "\<C-s>": ''
    \   }
    \ }

function! LightlineModified()
    return &modifiable && &modified ? ' ✘ ' : '   '
endfunction

function! LightlineReadonly()
    return &readonly ? '' : ''
endfunction

" Trim filename if it's to long for the window
function! LightlineFilename()
    let filename = expand('%:p') !=# '' ? expand('%:p') : '[No Name]'

    if filename =~ $HOME
        let filename = substitute(filename, $HOME, "~", "")
    endif

    if winwidth(0) <= 64 || strlen(filename) > 70
        let filename = expand('%:t')
    endif
    return filename
endfunction

" -------------------------- Loupe config ----------------------------
let g:LoupeCenterResults=0

" ------------------------ Sneak config ------------------------------
let g:sneak#label = 1
highlight! link Sneak Search
highlight! link SneakLabelMask Search
highlight! link SneakLabel IncSearch

" ------------------- base16-colorscheme config ----------------------

" Checkout https://github.com/chriskempson/base16-shell
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
else
    colorscheme base16-classic-dark
endif

" True colors on terminal
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif

